# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      - name: Summary
        run: |
          echo "Deployment User: ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}"
          echo "Method: SCP (Private Key)"
          echo "Remote Web Root: ${{ vars.DEPLOY_WEB_DIR }}"
          echo "Remote Bot Dir: ${{ vars.DEPLOY_BOT_DIR }}"
      - name: Print Working Directory
        run: ls -la
      - name: Write SSH Key
        run: |
          echo -e "${{ secrets.DEPLOY_KEY }}" > /tmp/key
          chmod 600 /tmp/key
      - name: Write Config JSON
        run: |
          echo ${{ secrets.PROD_CONFIG }} | base64 -d > /tmp/config.json
      - name: Clear Bot Dir and Ensure It Exists 
        run: |
          ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "rm -rf ${{ vars.DEPLOY_BOT_DIR }}"
          ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "mkdir --parents ${{ vars.DEPLOY_BOT_DIR }}"
      - name: Deploy Bot Files
        run: scp -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ./bot ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:${{ vars.DEPLOY_BOT_DIR }}/bot
      - name: Copy Config File
        run: scp -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /tmp/config.json ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:${{ vars.DEPLOY_BOT_DIR }}
      - name: Clear Web Root Dir 
        run: |
          ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "rm -rf '${{ vars.DEPLOY_WEB_DIR }}/(!phpMyAdmin)'"
      - name: Deploy Web App Files
        run: scp -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ./web ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:${{ vars.DEPLOY_WEB_DIR }}
      - name: Deploy setup.py and run it
        run: |
          scp -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ./setup.py ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:${{ vars.DEPLOY_BOT_DIR }}
          ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "python3 ${{ vars.DEPLOY_BOT_DIR }}/setup.py"
      - name: Create chownhtml file and execute it
        run: |
          echo "chown -R www-data:www-data ${{ vars.DEPLOY_WEB_DIR }}" > /tmp/chownhtml.sh
          chmod +x /tmp/chownhtml.sh
          scp -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r -p /tmp/chownhtml.sh ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:/tmp/chownhtml.sh
          ssh -i /tmp/key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "sudo /tmp/chownhtml.sh"
          
